}
close(con)
return(faObject)
}
loadFA <- function(filepath, fileSizeLimit = 1000000){
faObject <- new("faObj")
con <- file(filepath, "r")
x <- 0
currSeq <- ""
currChr <- ""
while(TRUE){
currline <- readLines(con, n=1)
if(length(currline) == 0 || x > fileSizeLimit) {
#cleanup and loop exit
break
}
if(tolower(substr(currline, 1, 1)) == ">"){
#print(substr(currline, 1, 1))
# 1. Place any existing seq + chrName in the data frame
if((nchar(currChr) > 0) & (nchar(currSeq) > 0)){
newSeqDt <- data.table(chrName = currChr, seq = currSeq)
print(newSeqDt)
faObject@sequenceData <- rbindlist(
list(faObject@sequenceData, newSeqDt)
)
}
# 2. Grab new chrname
currSeq <- ""
currChr <- substr((strsplit(currChr, " ")[[1]][1]), 2, nchar(currChr))
} else {
currSeq <- paste0(currSeq, currline)
#print(paste("pasting: ", currline))
}
x <- x + 1
}
close(con)
return(faObject)
}
loadFA <- function(filepath, fileSizeLimit = 1000000){
faObject <- new("faObj")
con <- file(filepath, "r")
x <- 0
currSeq <- ""
currChr <- ""
while(TRUE){
currline <- readLines(con, n=1)
if(length(currline) == 0 || x > fileSizeLimit) {
#cleanup and loop exit
break
}
if(tolower(substr(currline, 1, 1)) == ">"){
#print(substr(currline, 1, 1))
# 1. Place any existing seq + chrName in the data frame
print(paste("currChr:", currChr, "currSeq:", currSeq))
if((nchar(currChr) > 0) & (nchar(currSeq) > 0)){
newSeqDt <- data.table(chrName = currChr, seq = currSeq)
print(newSeqDt)
faObject@sequenceData <- rbindlist(
list(faObject@sequenceData, newSeqDt)
)
}
# 2. Grab new chrname
currSeq <- ""
currChr <- substr((strsplit(currChr, " ")[[1]][1]), 2, nchar(currChr))
} else {
currSeq <- paste0(currSeq, currline)
#print(paste("pasting: ", currline))
}
x <- x + 1
}
close(con)
return(faObject)
}
m <- loadFA("../test01.fa")
devtools::load_all()
rm(list=c('loadFA'))
devtools::load_all()
m <- loadFA("../test01.fa")
devtools::load_all()
m <- loadFA("../test01.fa")
devtools::load_all()
m <- loadFA("../test01.fa")
devtools::load_all()
m <- loadFA("../test01.fa")
devtools::load_all()
m <- loadFA("../test01.fa")
m
m@sequenceData
q <- m@sequenceData
q
View(q)
devtools::load_all()
devtools::load_all()
m <- loadFA("../test01.fa")
q <- m@sequenceData
q
View(q)
m <- loadFA("../sequences.fa")
q
q()
help()
help.start()
library(seqinr)
read.fasta(file=system.file("../sequences.fa"))
read.fasta(file=system.file("../sequences.fa", "r"))
fafile <- system.file("../sequences.fa", package="seqinr")
dnaseq <- read.fasta(file = fafile, as.string = TRUE, seqtype = "DNA")[[1]]
getwd()
fafile <- system.file("../notafile.fa", package="seqinr")
dnaseq <- read.fasta(file = fafile, as.string = TRUE, seqtype = "DNA")[[1]]
fafile <- system.file("../test01.fa", package="seqinr")
dnaseq <- read.fasta(file = fafile, as.string = TRUE, seqtype = "DNA")[[1]]
dnafile <- system.file("../sequences.fa", package = "seqinr")
read.faste(file=dnafile)
read.fasta(file=dnafile)
devtools::load_all()
read.fasta(file=dnafile)
read.fasta(file=dnafile)
dnafile <- system.file(""D:\Documents\School\Acad\Year 4\BCB410\sequences.fa"", package = "seqinr")
dnafile <- system.file("D:\Documents\School\Acad\Year 4\BCB410\sequences.fa", package = "seqinr")
dnafile <- system.file("D:/Documents/School/Acad/Year 4/BCB410/sequences.fa", package = "seqinr")
read.fasta(file=dnafile)
m <- read.fasta(dnafile)[[1]]
library(readr)
??vcf
dnafile <- system.file("D:/Documents/School/Acad/Year 4/BCB410/sequences.fa")
library(seqinr)
m <- read.fasta("../sequences")
m <- read.fasta("../sequences.fa")
m <- read.fasta("../ex01.fa")
m <- read.fasta("../test01.fa")
m
m[1]
m[2]
m[3]
m[]
m[1]
attributes(m[1])
attributes(m)
attributes(m$1)
attributes(m$1)
m$1
m[1]
m1<-m[1]
m[[1]]
m[[1]]
mOne <- m[[1]]
mOne
attributes(mOne)
mOne
print(mOne)
mOne[4]
mOne[5]
mOne[6]
length(m)
m
m[[2]]
attributes(m[[2]], "name"
)
attributes(m[[2]], "name")
attr(m[[2]], "name")
?attr
toString(mOne)
mOne
paste(mOne)
paste(mOne, sep="")
toString(m)
gsub("\"", "", mOne)
mOneStr <- gsub("\"", "", mOne)
mOneStr <- toString(mOne)
mOneStr <- gsub(", ", "", mOneStr)
m <- read.fasta("../sequences.fa")
m
m[[1]]
toString(m)
toString(m[[1]])
j <- toString(m[[1]])
faObject <- new("faObj")
devtools::load_all()
devtools::load_all()
devtools::check()
gc()
rm(m)
rm(m1)
rm(*)
rm()
gc()
rm(j, mOne)
gc()
devtools::check()
devtools::check()
devtools::check()
rand::last_error
library(seqinr)
devtools::check()
`rland::last_error()`
`rlang::last_error()`
rlang::last_error
`grross with a space` <- "hello"
rm(`grross with a space`)
gc()
devtools::loaded_packages(e)
devtools::loaded_packages()
seqinr
library(seqinr)
usethis::use_package("seqinr")
usethis::use_package("ggplot2")
devtools::check()
seqinr
usethis::use_package("data.table", "ggplot2", "methods", "seqinr")
usethis::use_package("data.table", "ggplot2", "methods")
usethis::use_package("data.table")
usethis::use_package("ggplot2")
usethis::use_package("methods")
usethis::use_package("seqinr")
devtools::check()
loadVCF("../ex01.vcf")
b <- loadVCF("../ex01.vcf")
b$variantData
b@variantData$fakeCh <- sample(1:6, size = nrow(b@variantData), replace = TRUE)
fakechplot <- ggplot(j@variantData, aes(fill=fakech, x=pos))
fakechplot <- ggplot(b@variantData, aes(fill=fakech, x=pos))
plotPosition(b)
j <- b
plotPosition(b)
fakechplot + geom_histogram(bins = 300, size = 1)
fakechplot + geom_histogram(bins = 300, size = 1)
fakechplot
hello
fakechplot
b@variantData
fakechplot <- ggplot(b@variantData, aes(fill=fakeCh, x=pos))
fakechplot + geom_histogram(bins=300, size=1)
fakechplot <- ggplot(b@variantData, aes(fill=ch, x=pos))
fakechplot + geom_histogram(bins=300, size=1)
fakechplot <- ggplot(b@variantData, aes(fill=toString(fakeCh, x=pos))
)
fakechplot <- ggplot(b@variantData, aes(fill=toString(fakeCh), x=pos))
fakechplot + geom_histogram(bins=300, size=1)
toString(b@variantData$fakeCh)
b <- loadVCF("../ex01.vcf")
b@variantData$fakeCh <- sample(c("1", "2", "3", "4", "5", "6"), size = nrow(b@variantData), replace = TRUE)
fakechplot <- ggplot(b@variantData, aes(fill=toString(fakeCh), x=pos))
fakechplot + geom_histogram(bins=300, size=1)
fakechplot <- ggplot(b@variantData, aes(fill=fakeCh, x=pos))
fakechplot + geom_histogram(bins=300, size=1)
gc()
#it's just the ratio of A<->G + C<->T changes / the rest.
#literally could be written in 1 line i think?
ti <- vcfObj@variantdata[
ref_a == "" & alt_a == ""
ref_a == "" & alt_a == ""
ref_a == "" & alt_a == ""
ref_a == "" & alt_a == ""] #C'est une data.table with the info. I need to filter by rows.
j
ti <- j@variantdata[
(ref_a == "A" & alt_a == "G") |
(ref_a == "G" & alt_a == "A") |
(ref_a == "T" & alt_a == "C") |
(ref_a == "C" & alt_a == "T") ]
ti <- j@variantData[
(ref_a == "A" & alt_a == "G") |
(ref_a == "G" & alt_a == "A") |
(ref_a == "T" & alt_a == "C") |
(ref_a == "C" & alt_a == "T") ]
ti
tv <- j@variantData[
(ref_a == "A" & alt_a == "C") | (ref_a == "C" & alt_a == "A" )|
(ref_a == "T" & alt_a == "A") | (ref_a == "A" & alt_a == "T" )|
(ref_a == "G" & alt_a == "C") | (ref_a == "C" & alt_a == "G" )|
(ref_a == "T" & alt_a == "G") | (ref_a == "G" & alt_a == "T" )
]
all <- j@variantData[ref_a == "A" | ref_a =="T" | ref_a == "C" | ref_a == G]
all <- j@variantData[ref_a == "A" | ref_a =="T" | ref_a == "C" | ref_a == "G"]
617+342
length(ti)
nrows(ti)
rows(ti)
nrow(ti)
nrow(ti) / nrow(tv)
ti
unique(ti by=ch)
b <- loadVCF("../text000.vcf")
plotposition(b)
plotPosition(b)
b <- loadVCF("../text000.vcf")
b\
b
q()
setwd("../../faketoscopy")
devtools
require("devtools")
install_github("terrence-a/SNPVisualizR")
library("SNPVisualizR")
ls("package:SNPVisualizR")
setwd("../BCB410/SNPVisualizR")
devtools::load_all()
library("SNPVisualizR")
ls("package:SNPVisualizR")
devtools::check
devtools::check()
q()
devtools::load_all()
library(SNPVisualizR)
devtools::load_all()
devtools::check()
setwd("..")
require("devtools")
devtools::install_github("EvgeniyaGorobets/PGxVision", build_vignettes=TRUE)
require("devtools")
devtools::install_github("EvgeniyaGorobets/PGxVision", build_vignettes=TRUE)
library("PGxVision")
devtools::install_github("EvgeniyaGorobets/PGxVision", build_vignettes=TRUE)
devtools::install_github("EvgeniyaGorobets/PGxVision", build_vignettes=TRUE)
1
require("devtools")
devtools::install_github("EvgeniyaGorobets/PGxVision", build_vignettes=TRUE)
install.packages("EvgeniyaGorobets/PGxVision")
devtools::install_github("EvgeniyaGorobets/PGxVision", build_vignettes=TRUE)
devtools::install_github("EvgeniyaGorobets/PGxVision", build_vignettes=TRUE)
devtools::install_github("EvgeniyaGorobets/PGxVision", build_vignettes=TRUE)
devtools::install_github("EvgeniyaGorobets/PGxVision", build_vignettes=TRUE)
devtools::install_github("EvgeniyaGorobets/PGxVision", build_vignettes=TRUE)
library("PGxVision")
ls("PGxVision")
ls("package:PGxVision")
data(package = "PGxVision")
vignette(package="PGxVision")
ls()
vignette("Plotting_Biomarkers")
help
help("PGxVision::buildManhattanPlot")
?PGxVision
PGxVision
?PGxVision::buildManhattanPlot
data(Biomarkers)
data(GRCh38.p13.Assembly)
experiment <- c("Lung", "Trametinib", "rna")
experiment <- c("Lung", "Trametinib", "rna")
PGxVision::Biomarkers
PGxVision::buildWaterfallPlot(PGxVision::BRCA.PDXE.paxlitaxel.response,
xAxisCol="tumour", drugSensitivityCol="angle",
colorCol="ODC1", xLabel="Tumour",
yLabel="Angle Between Treatment and Control",
title="Paclitaxel Response in BRCA Tumours")
data.table::setDT(PGxVision::Biomarkers)
PGxVision::Biomarkers
experiment <- setNames(c("Lymphoid", "Nvp-tae 684", "rna"),
c("tissue", "compound", "mDataType"))
PGxVision::buildVolcanoPlot(biomarkerDf=PGxVision::Biomarkers,
experiment=experiment)
PGxVision::Biomarkers
library("PGxVision")
PGxVision::Biomarkers
?PGxVision::buildManhattanPlot
geneSetIds <- PGxVision::queryGene(geneID = "ENSG00000000971", queryType = "GO:BP")
geneSetIds <- PGxVision::queryGene(geneId = "ENSG00000000971", queryType = "GO:BP")
geneSetIds
geneSets <- PGxVision::expandGeneSets((geneSetIds = egneSetIds, geneSetType = "GO:BP"))
geneSets <- PGxVision::expandGeneSets(geneSetIds = egneSetIds, geneSetType = "GO:BP")
geneSets <- PGxVision::expandGeneSets(geneSetIds = geneSetIds, geneSetType = "GO:BP")
geneSets
similarityScores <- PGxVision::computeGeneSetSimilarity(geneSets)
similarityScores
graph <- PGxVision::buildNetworkPlot(gsSimilarityDf = similarityScores)
?PGxVision::buildNetworkPlot
?PGxVision::geneSetAnalysis
msigdbr::msigdbr__collections()
msigdbr::msigdbr_collections()
graph <- PGxVision::geneSetAnalysis(geneId="ENSG00000000971", queryType="CP:REACTOME", similarityCutoff=0.2)
graph <- PGxVision::geneSetAnalysis(geneId="ENSG00000000971", queryType="CP:REACTOME", similarityCutoff=0.1)
graph <- PGxVision::geneSetAnalysis(geneId="ENSG00000000971", queryType="CP:REACTOME", similarityCutoff=0)
graph <- PGxVision::geneSetAnalysis(geneId="ENSG00000000971", queryType="CP:REACTOME", similarityCutoff=0)
graph
graph
library("ggplot2")
ggplot2
ggplot2::geom_histogram
c <- ggplot(aes(x=1:100, y=100:1)) + geom_bar()
fortify(1:100)
msigdbr::msigdbr_collections()$gs_subcat
sessionInfo()
help ?PGxVision::t''
help ?PGxVision::TestGeneSets
help ?PGxVision::builtWaterfallPlot
?PGxVision::buildManhattanPlot
?PGxVision::computeGeneSetSimilarity
?PGxVision::buildManhattanPlot
buildManhattanPlot()
data(Biomarkers)
data(GRCh38.p13.Assembly)
experiment <- c("Lung", "Trametinib", "rna")
names(experiment) <- c("tissue", "compound", "mDataType")
buildManhattanPlot(Biomarkers, GRCh38.p13.Assembly, experiment,
pValCutoff=0.01, relativeGenomeCoords=TRUE)
buildManhattanPlot(Biomarkers, GRCh38.p13.Assembly, experiment, 0.01, TRUE)
m <- buildManhattanPlot(Biomarkers, GRCh38.p13.Assembly, experiment, 0.01, TRUE)
m
?buildNetworkPlot
?queryGene()
?buildNetworkPlot
geneSetIds <- queryGene("ENSG00000000971", "GO:BP")
geneSets <- expandGeneSets(geneSetIds, "GO:BP")
vignettes()
vignette(package = PGxVision)
vignette(package = "PGxVision")
vignette("Plotting_Biomarkers")
geneSets <- PGxVision::expandGeneSets(geneSetIds = geneSetIds,
geneSetType = "GO:BP")
similarityScores <- PGxVision::computeGeneSetSimilarity(geneSets)
head(similarityScores)
graph <- PGxVision::buildNetworkPlot(gsSimilarityDf = similarityScores,
similarityCutoff = 0)
graph <- PGxVision::buildNetworkPlot(gsSimilarityDf = similarityScores, )
graph <- PGxVision::buildNetworkPlot(gsSimilarityDf = similarityScores)
vignette("Plotting_Biomarkers")
?buildManhattanPlot
vignette("Plotting_Biomarkers")
graph <- PGxVision::buildNetworkPlot(gsSimilarityDf = similarityScores)
graph
graph
typeof
typeof(graph)
?igraph
print_all(graph)
library('igraph')
library(igraph)
plot.igraph(rgaph)
plot.igraph(graph)
devtools::build_vignettes()
devtools::build()
.Last.error.trace
.Last.error.trace
devtools::build()
devtools::build_namespace()
devtools::document()
devtools::build_namespace()
devtools::build()
devtools::build_vignettes()
devtools::build()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
faObj <- loadFA(vcfData <- loadVCF( system.file("extdata", "test01.fa", package = "SNPVisualizR")))
faObj <- loadFA(vcfData <- loadVCF( system.file("extdata", "test01.fa", package = "SNPVisualizR")))
faObj <- loadFA(system.file("extdata", 'test01.fa', package = "SNPVisualizR")))
faObj <- loadFA(system.file("extdata", 'test01.fa', package = "SNPVisualizR"))
faFile <- system.file("extdata", "test01.fa", package="SNPVisualizR")
faFile
myFa <- read.fasta(file = faFile, as.string = TRUE)
myFa <- read.fasta(file = faFile, as.string = TRUE)
loadFA(system.file("extdata", "test01.fa", package="SNPVisualizR"))
system.file("extdata", "test01.fa", package="SNPVisualizR")
m <- system.file("extdata", "test01.fa", package="SNPVisualizR")
m
lapply()
m$
1
m$1
m[1]
m[0]
m
g <- system.file("extdata", m, package="SNPVisualizR")
myFa <- read.fasta(file = g, as.string = TRUE)
faObkj <- loadFA(system.file("extdata", "test01.fa", package="SNPVisualizR"))
getwd()
fafile <- "/inst/extdata/test01.fa"
faObj <- loadFA(fafile)
fileContents <- seqinr::read.fasta(file = fafile, as.string=TRUE)
fafile <- "inst/extdata/test01.fa"
fileContents <- seqinr::read.fasta(file = fafile, as.string=TRUE)
loadFa(fafile)
loadFA(fafile)
loadFA(fafile)
fafile <- "inst/extdata/test01.fa"
fileContents <- seqinr::read.fasta(file = fafile, as.string=TRUE)
loadFA(fafile)
devtools::load_all()
loadFA(fafile)
devtools::load_all()
loadFA(fafile)
devtools::check()
devtools::check()
devtools::check_examples()
devtools::run_examples()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check_win_release()
devtools::check()
devtools::check()
